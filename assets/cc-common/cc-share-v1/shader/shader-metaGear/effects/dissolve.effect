
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }

    dissolveTexture: {
      type: sampler2D
      value: null
    }

    threshold: {
      type: number
      value: 0.5
    }
    
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  uniform sampler2D dissolveTexture;

  varying mediump vec2 v_uv0;
#endif

uniform float threshold;

#include <alpha-test>

varying lowp vec4 v_color;

void main () {
  vec4 color = v_color;
  float val;
  #if USE_TEXTURE
    color *= texture2D(texture, v_uv0);
    val = texture2D(dissolveTexture, v_uv0).r;
    #if _USE_ETC1_TEXTURE
      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
    color.a *= smoothstep(0.,val, threshold);
    // color.a *= smoothstep(val,0.,threshold);
    // color.a *= step(threshold, val);
  #endif

  ALPHA_TEST(color);

  gl_FragColor = color;
}

}
