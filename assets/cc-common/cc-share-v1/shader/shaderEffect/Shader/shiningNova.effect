// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

#include <alpha-test>

varying lowp vec4 v_color;

// from https://www.shadertoy.com/view/XljXz3
#define SPEED       (1.0 / 80.0)
#define SMOOTH_DIST 0.6

#define PI 3.14159265359
uniform float iTime;

void main () {
  vec2 uv = v_uv0 - vec2(0.5, 0.5);
  uv.x *= (1920.0 / 1080.0);//aspectRatio;
  float dist = length(uv) * 1.5;
  float angle = (atan(uv.y, uv.x) + PI) / (2.0 * PI);

  vec3 textureDist  = texture2D(texture, vec2(fract(iTime * SPEED), angle)).xyz;
  vec4 normal  = texture2D(texture, v_uv0);
  textureDist *= 0.4;
  textureDist += 0.5;

  vec4 color = vec4(0.0,0.0,0.0,0.0);
  if (dist < textureDist.x)
      color.x += smoothstep(0.0,SMOOTH_DIST, textureDist.x - dist);
  if (dist < textureDist.y)
      color.y += smoothstep(0.0,SMOOTH_DIST, textureDist.y - dist);
  if (dist < textureDist.z)
      color.z += smoothstep(0.0,SMOOTH_DIST, textureDist.z - dist);
  color.a = color.x + color.y + color.z;
  color.xyz *= 2.;
  gl_FragColor = (color) * v_color;
}

}
