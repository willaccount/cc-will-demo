// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
    radiusMultiple: {
      type: number
      value: 0.0
    }
    Strength: {
      type: number
      value: 0.0
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

#include <alpha-test>

varying lowp vec4 v_color;
uniform float radiusMultiple;
uniform float Strength;

vec4 getTexelColor(sampler2D texture, vec2 uv) {
  vec4 color = texture2D(texture, uv);
  #if _USE_ETC1_TEXTURE
    color.a *= texture2D(texture, uv + vec2(0, 0.5)).r;
  #endif

  ALPHA_TEST(color);
  return color;
}

void main () {
  vec4 color = vec4(0.0, 0.0, 0.0, 0.0);

  const int Samples = 64; //multiple of 2
  vec2 center = vec2(0.5, 0.5);
    
  vec2 uv = v_uv0 ;
    
	vec2 dir = (v_uv0-center) ;
  
  for (int i = 0; i < Samples; i += 2) //operating at 2 samples for better performance
  {
      color += getTexelColor(texture,uv+float(i)/float(Samples)*dir*Strength);
      color += getTexelColor(texture,uv+float(i+1)/float(Samples)*dir*Strength);
  } 
  color = v_color * color/float(Samples);  
  if(radiusMultiple > 0.0) {
    float d = distance(v_uv0, vec2(0.5));
    color.a = 1.0 - d * radiusMultiple;
    // color.rgb /= 1.0 - d * radiusMultiple;
  }
  gl_FragColor = color;
}

}
