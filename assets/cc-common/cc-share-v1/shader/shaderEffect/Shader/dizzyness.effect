// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;

#if USE_TEXTURE
  attribute mediump vec2 a_uv0;
  varying mediump vec2 v_uv0;
#endif

varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif

  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

#if USE_TEXTURE
  uniform sampler2D texture;
  varying mediump vec2 v_uv0;
#endif

#include <alpha-test>

varying lowp vec4 v_color;
uniform float iTime;
const float scale = 0.05;

vec2 getOffset(float time, vec2 uv)
{
  float a = 1.0 + 0.5 * sin(time + uv.x * 10.0);
  float b = 1.0 + 0.5 * cos(time + uv.y * 10.0);
	
  return scale * vec2(a + sin(b), b + cos(a));
}

vec4 getColorTexture(sampler2D texture, vec2 uv){
  vec4 color = vec4(0.0);
  uv = clamp(uv, 0.0, 1.0);

  #if USE_TEXTURE
    color = texture2D(texture, uv);
    #if _USE_ETC1_TEXTURE
      color.a = texture2D(texture, uv + vec2(0, 0.5)).r;
    #endif
  #endif

  ALPHA_TEST(color);
  return color;
}


// https://www.shadertoy.com/view/XssGDN
void main () {
  float speed = 0.5;
  vec2 uv = v_uv0;
  float time= speed * iTime;
  float prevTime= speed * (iTime-1.0);
  // current offset
  vec2 offset= getOffset(time, uv);	
  // offset at prev frame
  vec2 prevOffset= getOffset(prevTime, uv);	

  // motion vector from previous to current frame
  vec2 delta= offset - prevOffset;

  uv += offset;
	
  vec4 color= vec4(0.0, 0.0, 0.0, 0.0);
	
  // some iterations of unweighted blur
  const int steps= 20;
  float factor= 1.0 / float(steps);
  
  for (int i=0; i<steps; i++)
  {
    color += getColorTexture(texture, uv);
	  uv += delta * factor;
  }
  gl_FragColor = color * factor * v_color;
}

}
