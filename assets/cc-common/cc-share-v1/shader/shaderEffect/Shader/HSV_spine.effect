// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    alphaThreshold: {
      type: number
      value: 0.5
    }
    vHSV: {
      type: vec3
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

#if _USE_MODEL
  uniform mat4 cc_matWorld;
#endif

attribute vec3 a_position;
attribute lowp vec4 a_color;
#if USE_TINT
  attribute lowp vec4 a_color0;
#endif

attribute mediump vec2 a_uv0;
varying mediump vec2 v_uv0;

varying lowp vec4 v_light;
#if USE_TINT
  varying lowp vec4 v_dark;
#endif

void main () {
  mat4 mvp;
  
  #if _USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

  v_uv0 = a_uv0;

  v_light = a_color;
  #if USE_TINT
    v_dark = a_color0;
  #endif

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision highp float;

uniform sampler2D texture;
varying mediump vec2 v_uv0;

#include <alpha-test>

varying lowp vec4 v_light;
#if USE_TINT
  varying lowp vec4 v_dark;
#endif

uniform vec3 vHSV;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main () {
  vec4 texColor = texture2D(texture, v_uv0);
  #if _USE_ETC1_TEXTURE
      texColor.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
  #endif
  vec4 finalColor;

  #if USE_TINT
    finalColor.a = v_light.a * texColor.a;
    finalColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;
  #else
    finalColor = texColor * v_light;
  #endif

  ALPHA_TEST(finalColor);

  vec3 fragRGB = finalColor.rgb;
  vec3 fragHSV = rgb2hsv(fragRGB).xyz;
  fragHSV.x += vHSV.x;
  fragHSV.yz *= vHSV.yz;
  //fragHSV.xyz = mod(fragHSV.xyz, 1.0);
  fragRGB = hsv2rgb(fragHSV);
  gl_FragColor = vec4(fragRGB, finalColor.w);
}

}
