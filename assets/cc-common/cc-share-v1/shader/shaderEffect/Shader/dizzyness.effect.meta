{
  "ver": "1.0.15",
  "uuid": "2760d54d-28e0-4952-ad36-1a0a67bdef29",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\n\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\n\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\n\nvarying lowp vec4 v_color;\n\nvoid main () {\n  mat4 mvp;\n  \n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = mvp * vec4(a_position, 1);\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\nuniform float iTime;\nconst float scale = 0.05;\n\nvec2 getOffset(float time, vec2 uv)\n{\n  float a = 1.0 + 0.5 * sin(time + uv.x * 10.0);\n  float b = 1.0 + 0.5 * cos(time + uv.y * 10.0);\n\t\n  return scale * vec2(a + sin(b), b + cos(a));\n}\n\nvec4 getColorTexture(sampler2D texture, vec2 uv){\n  vec4 color = vec4(0.0);\n  uv = clamp(uv, 0.0, 1.0);\n\n  #if USE_TEXTURE\n    color = texture2D(texture, uv);\n    #if _USE_ETC1_TEXTURE\n      color.a = texture2D(texture, uv + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  ALPHA_TEST(color);\n  return color;\n}\n\nvoid main () {\n  float speed = 0.5;\n  vec2 uv = v_uv0;\n  float time= speed * iTime;\n  float prevTime= speed * (iTime-1.0);\n  \n  vec2 offset= getOffset(time, uv);\t\n  \n  vec2 prevOffset= getOffset(prevTime, uv);\t\n\n  \n  vec2 delta= offset - prevOffset;\n\n  uv += offset;\n\t\n  vec4 color= vec4(0.0, 0.0, 0.0, 0.0);\n\t\n  \n  const int steps= 20;\n  float factor= 1.0 / float(steps);\n  \n  for (int i=0; i<steps; i++)\n  {\n    color += getColorTexture(texture, uv);\n\t  uv += delta * factor;\n  }\n  gl_FragColor = color * factor * v_color;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}